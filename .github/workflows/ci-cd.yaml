name: CI/CD Pipeline

on:
  push:
    branches: ["main"]

# Give the workflow permission to write packages (required to push to GHCR)
permissions:
  contents: read
  packages: write

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: quarkus-app

    steps:
      # ----------------------
      # Step 1: Checkout Code
      # ----------------------
      - name: Checkout code
        uses: actions/checkout@v3

      # ----------------------
      # Step 2: Set up Java
      # ----------------------
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # ----------------------
      # Step 3: Make mvnw executable
      # ----------------------
      - name: Make mvnw executable
        run: chmod +x mvnw

      # ----------------------
      # Step 4: Build Uber-JAR
      # ----------------------
      - name: Build Quarkus Uber-JAR
        run: ./mvnw package -DskipTests -Dquarkus.package.type=uber-jar

      # ----------------------
      # Step 5a: Login to GHCR with PAT (if provided)
      # ----------------------
      - name: Login to GitHub Container Registry (PAT)
        if: ${{ secrets.CR_PAT != '' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      # ----------------------
      # Step 5b: Login to GHCR with GITHUB_TOKEN (fallback)
      # ----------------------
      - name: Login to GitHub Container Registry (GITHUB_TOKEN)
        if: ${{ secrets.CR_PAT == '' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ----------------------
      # Step 6: Build & Push Docker Image (with debug)
      # ----------------------
      - name: Build & Push Docker Image
        env:
          IMAGE_USER: ${{ github.actor }}
          SHORT_SHA: ${{ github.sha }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        run: |
          set -euo pipefail
          set -x

          # shorten the SHA
          SHORT=${SHORT_SHA::7}
          IMAGE_BASE="ghcr.io/${IMAGE_USER}/${IMAGE_NAME}"
          IMAGE_LATEST="${IMAGE_BASE}:latest"
          IMAGE_SHA="${IMAGE_BASE}:${SHORT}"

          echo "Building images:"
          echo " - latest : $IMAGE_LATEST"
          echo " - sha    : $IMAGE_SHA"

          echo "Docker version and info:"
          docker --version
          docker info || true

          # Build and tag both latest and short-sha
          docker build -t "${IMAGE_LATEST}" -t "${IMAGE_SHA}" -f src/main/docker/Dockerfile .

          echo "Local images (filter):"
          docker images | grep "${IMAGE_NAME}" || true

          echo "Pushing ${IMAGE_SHA}..."
          docker push "${IMAGE_SHA}"

          echo "Pushing ${IMAGE_LATEST}..."
          docker push "${IMAGE_LATEST}"

      # ----------------------
      # Step 7: (Optional) Make package public via API (uncomment if desired)
      # Note: requires GITHUB_TOKEN or CR_PAT to have appropriate scopes.
      # ----------------------
      # - name: Make GHCR package public
      #   if: ${{ always() }}
      #   run: |
      #     # Only run if you want the package visibility changed automatically.
      #     # Replace "quarkus-app" with your image name if different.
      #     curl -s -X PATCH \
      #       -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      #       -H "Accept: application/vnd.github.v3+json" \
      #       "https://api.github.com/user/packages/container/${IMAGE_NAME}/visibility" \
      #       -d '{"visibility":"public"}' || true

      # ----------------------
      # Step 8: Set up kubectl (if you still want to deploy)
      # ----------------------
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      # ----------------------
      # Step 9: Deploy to Kubernetes (example)
      # ----------------------
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s-deployment.yaml
          kubectl apply -f k8s-service.yaml
